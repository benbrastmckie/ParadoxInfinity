####The Quine Sentence

Now, suppose there exists a Turing Machine that prints out all and only true sentences of \(L\). Say it is Turing Machine number \(m\).

We can define a formula we’ll call \(\mbox{Quine}(x_1, x_2)\)[^fn_Quine] which is true iff it is *not* the case that \(\mbox{Print}(m, x_1) and \(\mbox{Sub}(x_2, x_2, x_1)\) — that is, the magical turing machine does *not* ever print the sentence encoded by \(x_1\), and that sentence is the result of substituting the name for the number \(x_2\) in \(L\) into the formula that \(x_2\) encodes.

[^fn_Quine]: Willard Van Orman[Quine][Quine] was one of the most important 20th Century philosophers; I mentioned him way back that the beginning of the class, when we divided paradoxes into veridical paradoxes,  falsidical paradoxes and antinomies. This sentence is named in his honour because it has some relation to [Quine’s paradox][Q-paradox].)

[Quine]:https://en.wikipedia.org/wiki/Willard_Van_Orman_Quine
[Q-paradox]:https://en.wikipedia.org/wiki/Quine%27s_paradox